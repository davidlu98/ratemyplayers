generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id                 String         @id @default(uuid())
  current_name       String         @unique
  region             Region
  level              Int
  archetype          String
  branch             String
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  server             String
  avatar             String
  current_name_lower String         @unique
  job                String
  previous_names     PreviousName[]
  reviews            Review[]
}

model PreviousName {
  id         String   @id @default(uuid())
  player_id  String
  name       String
  changed_at DateTime @default(now())
  name_lower String
  player     Player   @relation(fields: [player_id], references: [id], onDelete: Cascade)
}

model Review {
  id         String   @id @default(uuid())
  player_id  String
  rating     Int
  comment    String
  created_at DateTime @default(now())
  anonymous  Boolean  @default(false)
  user_id    String
  player     Player   @relation(fields: [player_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  votes      Vote[]
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  password   String
  created_at DateTime @default(now())
  reviews    Review[]
  Vote       Vote[]
}

model Vote {
  id        String @id @default(uuid())
  user_id   String
  review_id String
  value     Int // 1 for upvote, -1 for downvote
  user      User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  review    Review @relation(fields: [review_id], references: [id], onDelete: Cascade)

  @@unique([user_id, review_id]) // Prevents multiple votes by the same user on a single review
}

enum Region {
  NA
  EU
}
